<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
				http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
				http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">

	<description>Spring公共配置文件</description>



	<!-- 定义受环境影响易变的变量 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<!-- (公司测试环境(166库)) -->
				<!-- <value> classpath*:/application_test.properties </value> -->
				<!-- <value> classpath*:/application_localhost.properties </value> -->

				<!-- (深圳正式环境(11,12库)) -->
				<value>classpath*:/application_sz-13.properties</value>
				<!-- <value>classpath*:/application_localhost.properties</value> -->
			</list>
		</property>
	</bean>

	<!-- 数据源配置,使用应用内的DBCP数据库连接池 写数据库 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<!-- Connection Info -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- Connection Pooling Info -->
		<property name="initialSize" value="5" />

		<!-- 最大连接数据库连接数，设置为0时，表示没有限制 -->
		<property name="maxActive" value="100" />

		<!-- 最大等待连接中的数量，设置为0时，表示没有限制 -->
		<property name="maxIdle" value="30" />

		<!-- 最大等待秒数，单位为毫秒， 超过时间会报出错误信息 -->
		<property name="maxWait" value="60000" />

		<property name="poolPreparedStatements" value="true" />

		<!-- 设置从数据源中返回的连接是否采用自动提交机制，默认值为 true； -->
		<property name="defaultAutoCommit" value="false" />

		<!-- 使用DBCP连接池检测未关闭的数据库连接,DBCP会自动把超过timeout时间仍未关闭的连接强制关闭， 并且打出异常信息(包含打开连接的代码位置)。 
			但是要注意，不能依赖这种方式关闭连接，是有一定风险的，比如万一页面操作数据库的时间偶尔超过了 timeout的时间，那会造成执行错误。 <property 
			name="removeAbandoned" value="true" /> <property name="removeAbandonedTimeout" 
			value="30" /> <property name="logAbandoned" value="true" /> -->
	</bean>

	<!-- 数据源配置,使用应用服务器的数据库连接池 -->
	<!-- <jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/ExampleDB" 
		/> -->

	<!-- Hibernate配置 -->
	<bean id="sessionFactory" autowire="byName"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="namingStrategy"> <bean class="org.hibernate.cfg.ImprovedNamingStrategy" 
			/> </property> -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					${hibernate.dialect}
				</prop>
				<prop key="hibernate.show_sql">
					${hibernate.show_sql}
				</prop>
				<prop key="hibernate.format_sql">
					${hibernate.format_sql}
				</prop>
				<!-- <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider 
					</prop> <prop key="hibernate.cache.provider_configuration_file_resource_path">${hibernate.ehcache_config_file} 
					</prop> -->
			</props>
		</property>
		<!-- 扫描Hibernate映射文件 -->
		<property name="packagesToScan">
			<list>
				<value>com.symbol.wp.core.entity</value>
				<value>com.symbol.app.mantoeye.entity</value>
				<value>com.symbol.app.mantoeye.entity.*</value>
			</list>
		</property>
	</bean>


	<!-- 事务管理器配置,单数据源事务 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
	<context:component-scan base-package="com.symbol" />

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- WEB SERVICE -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
</beans>